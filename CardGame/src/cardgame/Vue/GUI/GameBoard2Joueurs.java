package cardgame.Vue.GUI;

import cardgame.API.Jeux;
import cardgame.CommandeCoup.AttaqueCarteCommande;
import cardgame.CommandeCoup.AttaqueJoueurCommande;
import cardgame.CommandeCoup.Commande;
import cardgame.CommandeCoup.DefausseCommande;
import cardgame.CommandeCoup.DeploieCommande;
import cardgame.CommandeCoup.EnchantCommande;
import cardgame.CommandeCoup.ForfaitCommande;
import cardgame.CommandeCoup.PigerCommande;
import cardgame.CommandeCoup.SloubiCommande;
import cardgame.CommandeCoup.SoinsCommande;
import cardgame.Controller.Controller;
import cardgame.JeuxCartes.Carte;
import cardgame.JeuxCartes.Perso;
import java.awt.Dimension;
import java.awt.GraphicsEnvironment;
import java.awt.Rectangle;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.border.Border;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author mathieu
 */
public class GameBoard2Joueurs extends JFrame {

    protected Rectangle screenSize;
    private Controller cont;
    private final Jeux api;
    private List<CartesGUI> cartes;
    private int joueurAct;

    public GameBoard2Joueurs(Jeux jeu) {
        api = jeu;
        cartes = new ArrayList<>();
        initComponents();
        calculateScreenSize();
        this.setPreferredSize(new Dimension(screenSize.width * 80 / 100, screenSize.height * 85 / 100));
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        pack();
        this.RefreshBoard();
    }

    public void setController(Controller c) {
        cont = c;
    }

    public void ajouterLog(String logData) {
        this.logArea.setText(this.logArea.getText() + "\n" + logData);
    }

    public void resetChoices() {
        for (CartesGUI c : this.cartes) {
            c.setSelected(false);
        }
    }

    private void InitBoard() {
        Collection<Carte> mainJoueur1 = api.getCartesMainJoueur(0);
        Collection<Carte> mainJoueur2 = api.getCartesMainJoueur(1);
        Collection<Perso> boardJoueur1 = api.getCartesJeuJoueur(0);
        Collection<Perso> boardJoueur2 = api.getCartesJeuJoueur(1);

        for (Carte c : mainJoueur1) {
            CartesGUI cGUI = new CartesGUI(c, 0, new Dimension(100, 100));
            panelMainJoueur1.add(cGUI);
            cartes.add(cGUI);
        }
        for (Carte c : mainJoueur2) {
            CartesGUI cGUI = new CartesGUI(c, 1, new Dimension(100, 100));
            panelMainJoueur2.add(cGUI);
            cartes.add(cGUI);
        }
        for (Carte c : boardJoueur1) {
            CartesGUI cGUI = new CartesGUI(c, 0, new Dimension(100, 100));
            panelJeuJoueur1.add(cGUI);
            cartes.add(cGUI);
        }
        for (Carte c : boardJoueur2) {
            CartesGUI cGUI = new CartesGUI(c, 1, new Dimension(100, 100));
            panelJeuJoueur2.add(cGUI);
            cartes.add(cGUI);
        }
        lblPioche.setText("Cartes restantes : " + api.getnbCartesDeck(0));
        lblPioche2.setText("Cartes restantes : " + api.getnbCartesDeck(1));
        this.invalidate();
        this.validate();
        this.repaint();
        this.pack();
    }

    public void RefreshBoard() {
        joueurAct = api.aQuiLeTour();
        this.setTitle("Tour Joueur " + joueurAct);
        this.ajouterLog("Nouveau Tour : Joueur " + joueurAct);
        this.panelMainJoueur1.removeAll();
        this.panelMainJoueur2.removeAll();
        this.panelJeuJoueur1.removeAll();
        this.panelJeuJoueur2.removeAll();
        this.InitBoard();
    }

    public void verifierFinPartie() {
        if (api.partieFini()) {
            JOptionPane.showMessageDialog(panelGame, "Le joueur " + api.getJoueurGagnant() + "vient de gagne rla partie.");
            api.finPartie();
            System.exit(-1);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        panelGame = new javax.swing.JPanel();
        piocheBut = new javax.swing.JButton();
        deploieBut = new javax.swing.JButton();
        attBut = new javax.swing.JButton();
        soinBut = new javax.swing.JButton();
        enchBut = new javax.swing.JButton();
        defauBut = new javax.swing.JButton();
        forfBut = new javax.swing.JButton();
        slouBut = new javax.swing.JButton();
        panelMainJoueur1 = new javax.swing.JPanel();
        panelMainJoueur2 = new javax.swing.JPanel();
        panelJeuJoueur2 = new javax.swing.JPanel();
        panelJeuJoueur1 = new javax.swing.JPanel();
        panelDeckJoueur1 = new javax.swing.JPanel();
        lblPioche = new javax.swing.JLabel();
        panelDeckJoueur2 = new javax.swing.JPanel();
        lblPioche2 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        logArea = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        panelGame.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Jeux", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 3, 24))); // NOI18N
        panelGame.setLayout(new java.awt.GridBagLayout());

        piocheBut.setText("Pioche");
        piocheBut.setMaximumSize(new java.awt.Dimension(200, 200));
        piocheBut.setMinimumSize(new java.awt.Dimension(80, 90));
        piocheBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                piocheButActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 67;
        gridBagConstraints.ipady = 30;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.13;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(5, 18, 0, 0);
        panelGame.add(piocheBut, gridBagConstraints);

        deploieBut.setText("Deploie");
        deploieBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deploieButActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 67;
        gridBagConstraints.ipady = 50;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.13;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(5, 18, 0, 0);
        panelGame.add(deploieBut, gridBagConstraints);

        attBut.setText("Attaque");
        attBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                attButActionPerformed(evt);
            }
        });
        attBut.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                attButKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 67;
        gridBagConstraints.ipady = 50;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.13;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(5, 18, 0, 0);
        panelGame.add(attBut, gridBagConstraints);

        soinBut.setText("Soins");
        soinBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                soinButActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 89;
        gridBagConstraints.ipady = 17;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.13;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(5, 18, 0, 0);
        panelGame.add(soinBut, gridBagConstraints);

        enchBut.setText("Enchant");
        enchBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enchButActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 56;
        gridBagConstraints.ipady = 17;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.13;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(5, 18, 0, 0);
        panelGame.add(enchBut, gridBagConstraints);

        defauBut.setText("Défausse");
        defauBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                defauButActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 47;
        gridBagConstraints.ipady = 17;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.13;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(5, 18, 0, 0);
        panelGame.add(defauBut, gridBagConstraints);

        forfBut.setText("Forfait");
        forfBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                forfButActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 70;
        gridBagConstraints.ipady = 17;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.13;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(5, 18, 0, 0);
        panelGame.add(forfBut, gridBagConstraints);

        slouBut.setText("Sloubi?");
        slouBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                slouButActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 9;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 70;
        gridBagConstraints.ipady = 17;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.13;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(5, 18, 0, 0);
        panelGame.add(slouBut, gridBagConstraints);

        panelMainJoueur1.setBorder(javax.swing.BorderFactory.createTitledBorder("Main"));
        panelMainJoueur1.setMinimumSize(new java.awt.Dimension(100, 200));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 10;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 1066;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.2;
        gridBagConstraints.weighty = 0.2;
        panelGame.add(panelMainJoueur1, gridBagConstraints);

        panelMainJoueur2.setBorder(javax.swing.BorderFactory.createTitledBorder("Main Joueur 2"));
        panelMainJoueur2.setMinimumSize(new java.awt.Dimension(100, 200));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.ipadx = 1066;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.2;
        gridBagConstraints.weighty = 0.2;
        panelGame.add(panelMainJoueur2, gridBagConstraints);

        panelJeuJoueur2.setBorder(javax.swing.BorderFactory.createTitledBorder("Jeu Joueur 2"));
        panelJeuJoueur2.setMinimumSize(new java.awt.Dimension(100, 200));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 1241;
        gridBagConstraints.ipady = 50;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.2;
        gridBagConstraints.weighty = 0.2;
        panelGame.add(panelJeuJoueur2, gridBagConstraints);

        panelJeuJoueur1.setBorder(javax.swing.BorderFactory.createTitledBorder("Jeu"));
        panelJeuJoueur1.setMinimumSize(new java.awt.Dimension(100, 200));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 1241;
        gridBagConstraints.ipady = 50;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.2;
        gridBagConstraints.weighty = 0.2;
        panelGame.add(panelJeuJoueur1, gridBagConstraints);

        panelDeckJoueur1.setBorder(javax.swing.BorderFactory.createTitledBorder("Deck"));

        lblPioche.setText("Cartes restantes :");

        javax.swing.GroupLayout panelDeckJoueur1Layout = new javax.swing.GroupLayout(panelDeckJoueur1);
        panelDeckJoueur1.setLayout(panelDeckJoueur1Layout);
        panelDeckJoueur1Layout.setHorizontalGroup(
            panelDeckJoueur1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelDeckJoueur1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblPioche, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(162, Short.MAX_VALUE))
        );
        panelDeckJoueur1Layout.setVerticalGroup(
            panelDeckJoueur1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelDeckJoueur1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblPioche, javax.swing.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE)
                .addContainerGap())
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.ipadx = 150;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.2;
        gridBagConstraints.weighty = 0.2;
        panelGame.add(panelDeckJoueur1, gridBagConstraints);

        panelDeckJoueur2.setBorder(javax.swing.BorderFactory.createTitledBorder("Deck Joueur 2"));

        lblPioche2.setText("Cartes restantes :");

        javax.swing.GroupLayout panelDeckJoueur2Layout = new javax.swing.GroupLayout(panelDeckJoueur2);
        panelDeckJoueur2.setLayout(panelDeckJoueur2Layout);
        panelDeckJoueur2Layout.setHorizontalGroup(
            panelDeckJoueur2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelDeckJoueur2Layout.createSequentialGroup()
                .addComponent(lblPioche2, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 150, Short.MAX_VALUE))
        );
        panelDeckJoueur2Layout.setVerticalGroup(
            panelDeckJoueur2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblPioche2, javax.swing.GroupLayout.DEFAULT_SIZE, 46, Short.MAX_VALUE)
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 150;
        gridBagConstraints.ipady = 30;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.2;
        gridBagConstraints.weighty = 0.2;
        panelGame.add(panelDeckJoueur2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 6.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(20, 10, 20, 0);
        getContentPane().add(panelGame, gridBagConstraints);

        jPanel2.setLayout(new java.awt.BorderLayout(0, 10));

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        logArea.setColumns(1);
        logArea.setRows(40);
        logArea.setFocusable(false);
        jScrollPane1.setViewportView(logArea);

        jPanel2.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jLabel1.setFont(new java.awt.Font("Cantarell", 3, 36)); // NOI18N
        jLabel1.setText("Log");
        jPanel2.add(jLabel1, java.awt.BorderLayout.PAGE_START);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 200;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.4;
        gridBagConstraints.weighty = 0.9;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 30, 10);
        getContentPane().add(jPanel2, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void piocheButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_piocheButActionPerformed
        PigerCommande cmd = new PigerCommande(api, joueurAct);
        cont.faireAction(cmd);
    }//GEN-LAST:event_piocheButActionPerformed

    private void attButKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_attButKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_attButKeyPressed

    private void deploieButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deploieButActionPerformed
        Carte perso = null;
        Carte arme = null;
        List<Carte> enchant = new ArrayList<>();
        this.ajouterLog("Déployer perso");
        boolean selectionCorrect = true;
        for (CartesGUI cg : cartes) {
            if (cg.isSelected()) {
                if (cg.estPerso && perso == null) {
                    perso = cg.getCarte();
                } else if (cg.estArme && arme == null) {
                    arme = cg.getCarte();
                } else if (cg.estMagie) {
                    enchant.add(cg.getCarte());
                } else {
                    selectionCorrect = false;
                }
            }
        }
        if (!selectionCorrect) {
            this.ajouterLog("La sélection prise est incorrecte.");
            return;
        }

        DeploieCommande cmd = new DeploieCommande(api, joueurAct, perso, arme, enchant);
        cont.faireAction(cmd);

    }//GEN-LAST:event_deploieButActionPerformed

    private void defauButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_defauButActionPerformed
        List<Carte> cartesSelected = new ArrayList<>();
        for (CartesGUI cg : cartes) {
            if (cg.isSelected()) {
                cartesSelected.add(cg.getCarte());
            }
        }
        DefausseCommande cmd = new DefausseCommande(api, joueurAct, cartesSelected);
        cont.faireAction(cmd);
    }//GEN-LAST:event_defauButActionPerformed

    private void attButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_attButActionPerformed
        Carte attaquant = null;
        Carte attaquee = null;
        boolean coupCorrect = true;
        for (CartesGUI cg : cartes) {
            if (cg.isSelected()) {
                if (cg.joueur == joueurAct && cg.estPerso && attaquant == null) {
                    attaquant = cg.getCarte();
                } else if (cg.joueur != joueurAct && cg.estPerso && attaquee == null) {
                    attaquee = cg.getCarte();
                } else {
                    coupCorrect = false;
                }
            }
        }
        if (!coupCorrect || attaquant == null) {
            this.ajouterLog("Erreur : La sélection donné pour l'attaque est incorrecte.");
            return;
        }
        boolean peutAttaquerJoueur = joueurAct == 0 ? panelJeuJoueur2.getComponentCount() == 0 : panelJeuJoueur1.getComponentCount() == 0;
        Commande cmd;
        if (peutAttaquerJoueur && attaquee == null) {
            cmd = new AttaqueJoueurCommande(api, joueurAct, (joueurAct + 1) % 2, attaquant);
        } else if (attaquee != null) {
            cmd = new AttaqueCarteCommande(api, joueurAct, (joueurAct + 1) % 2, attaquant, attaquee);
        } else {
            this.ajouterLog("Erreur : Vous ne pouvez pas attaquer le joueur actuellement.");
            return;
        }
        cont.faireAction(cmd);

    }//GEN-LAST:event_attButActionPerformed

    private void forfButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_forfButActionPerformed
        ForfaitCommande cmd = new ForfaitCommande(api, joueurAct);
        cont.faireAction(cmd);
    }//GEN-LAST:event_forfButActionPerformed

    private void soinButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_soinButActionPerformed
        Carte soigneur = null;
        Carte soignee = null;
        boolean coupCorrect = true;
        for (CartesGUI cg : cartes) {
            if (cg.isSelected()) {
                if (cg.joueur == joueurAct && soigneur == null) {
                    soigneur = cg.getCarte();
                } else if (cg.joueur == joueurAct && soignee == null) {
                    soignee = cg.getCarte();
                } else {
                    coupCorrect = false;
                }
            }
        }

        if (!coupCorrect || soigneur == null || soignee == null) {
            this.ajouterLog("Erreur : Vous ne pouvez pas faire un soin avec cette sélection.");
            return;
        }

        if (JOptionPane.showConfirmDialog(panelGame, "Est-ce ceci le healer? :\n" + soigneur.toJSON()) == JOptionPane.NO_OPTION) {
            Carte temp = soignee;
            soignee = soigneur;
            soigneur = temp;
        }

        SoinsCommande cmd = new SoinsCommande(api, joueurAct, soigneur, soignee);
        cont.faireAction(cmd);

    }//GEN-LAST:event_soinButActionPerformed

    private void enchButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enchButActionPerformed
        List<Carte> ench = new ArrayList<>();
        Carte perso = null;
        boolean verifCorrect = true;
        for (CartesGUI cg : cartes) {
            if (cg.isSelected()) {
                if (cg.estMagie) {
                    ench.add(cg.getCarte());
                } else if (cg.estPerso && perso == null) {
                    perso = cg.getCarte();
                } else {
                    verifCorrect = false;
                }
            }
        }
        if (!verifCorrect || perso == null || ench.isEmpty()) {
            this.ajouterLog("Erreur : les cartes choisis sont pas corrected pour enchanter.");
            return;
        }
        
        
        EnchantCommande cmd = new EnchantCommande(api, joueurAct, ench, perso);
        cont.faireAction(cmd);
        
    }//GEN-LAST:event_enchButActionPerformed

    private void slouButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_slouButActionPerformed
        SloubiCommande cmd = new SloubiCommande();
        cont.faireAction(cmd);
    }//GEN-LAST:event_slouButActionPerformed

    public final void calculateScreenSize() {
        GraphicsEnvironment graphicsEnvironment = GraphicsEnvironment.getLocalGraphicsEnvironment();
        Rectangle maximumWindowBounds = graphicsEnvironment.getMaximumWindowBounds();
        screenSize = maximumWindowBounds;

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton attBut;
    private javax.swing.JButton defauBut;
    private javax.swing.JButton deploieBut;
    private javax.swing.JButton enchBut;
    private javax.swing.JButton forfBut;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblPioche;
    private javax.swing.JLabel lblPioche2;
    private javax.swing.JTextArea logArea;
    private javax.swing.JPanel panelDeckJoueur1;
    private javax.swing.JPanel panelDeckJoueur2;
    private javax.swing.JPanel panelGame;
    private javax.swing.JPanel panelJeuJoueur1;
    private javax.swing.JPanel panelJeuJoueur2;
    private javax.swing.JPanel panelMainJoueur1;
    private javax.swing.JPanel panelMainJoueur2;
    private javax.swing.JButton piocheBut;
    private javax.swing.JButton slouBut;
    private javax.swing.JButton soinBut;
    // End of variables declaration//GEN-END:variables
}
